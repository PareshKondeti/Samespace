{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nexport function useFragment(options) {\n  return wrapHook(\"useFragment\", _useFragment, useApolloClient(options.client))(options);\n}\nfunction _useFragment(options) {\n  var cache = useApolloClient(options.client).cache;\n  var from = options.from,\n    rest = __rest(options, [\"from\"]);\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  var id = React.useMemo(function () {\n    return typeof from === \"string\" ? from : cache.identify(from);\n  }, [cache, from]);\n  var resultRef = React.useRef();\n  var stableOptions = useDeepMemo(function () {\n    return __assign(__assign({}, rest), {\n      from: id\n    });\n  }, [rest, id]);\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  var currentDiff = React.useMemo(function () {\n    var fragment = stableOptions.fragment,\n      fragmentName = stableOptions.fragmentName,\n      from = stableOptions.from,\n      _a = stableOptions.optimistic,\n      optimistic = _a === void 0 ? true : _a;\n    return diffToResult(cache.diff(__assign(__assign({}, stableOptions), {\n      returnPartialData: true,\n      id: from,\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic: optimistic\n    })));\n  }, [stableOptions, cache]);\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = React.useCallback(function () {\n    return resultRef.current || currentDiff;\n  }, [currentDiff]);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var subscription = cache.watchFragment(stableOptions).subscribe({\n      next: function (result) {\n        // Since `next` is called async by zen-observable, we want to avoid\n        // unnecessarily rerendering this hook for the initial result\n        // emitted from watchFragment which should be equal to\n        // `currentDiff`.\n        if (equal(result, currentDiff)) return;\n        resultRef.current = result;\n        // If we get another update before we've re-rendered, bail out of\n        // the update and try again. This ensures that the relative timing\n        // between useQuery and useFragment stays roughly the same as\n        // fixed in https://github.com/apollographql/apollo-client/pull/11083\n        clearTimeout(lastTimeout);\n        lastTimeout = setTimeout(forceUpdate);\n      }\n    });\n    return function () {\n      resultRef.current = void 0;\n      subscription.unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [cache, stableOptions, currentDiff]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"names":["React","mergeDeepArray","useApolloClient","useSyncExternalStore","useDeepMemo","wrapHook","equal","useFragment","options","_useFragment","client","cache","from","rest","__rest","id","useMemo","identify","resultRef","useRef","stableOptions","__assign","currentDiff","fragment","fragmentName","_a","optimistic","diffToResult","diff","returnPartialData","query","getSnapshot","useCallback","current","forceUpdate","lastTimeout","subscription","watchFragment","subscribe","next","result","clearTimeout","setTimeout","unsubscribe","data","complete","missing","map","error"],"sources":["../../../src/react/hooks/useFragment.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  return wrapHook(\n    \"useFragment\",\n    _useFragment,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction _useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient(options.client);\n  const { from, ...rest } = options;\n\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  const id = React.useMemo(\n    () => (typeof from === \"string\" ? from : cache.identify(from)),\n    [cache, from]\n  );\n\n  const resultRef = React.useRef<UseFragmentResult<TData>>();\n  const stableOptions = useDeepMemo(() => ({ ...rest, from: id! }), [rest, id]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  const currentDiff = React.useMemo(() => {\n    const { fragment, fragmentName, from, optimistic = true } = stableOptions;\n\n    return diffToResult(\n      cache.diff<TData>({\n        ...stableOptions,\n        returnPartialData: true,\n        id: from,\n        query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n        optimistic,\n      })\n    );\n  }, [stableOptions, cache]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(\n    () => resultRef.current || currentDiff,\n    [currentDiff]\n  );\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n        const subscription = cache.watchFragment(stableOptions).subscribe({\n          next: (result) => {\n            // Since `next` is called async by zen-observable, we want to avoid\n            // unnecessarily rerendering this hook for the initial result\n            // emitted from watchFragment which should be equal to\n            // `currentDiff`.\n            if (equal(result, currentDiff)) return;\n            resultRef.current = result;\n            // If we get another update before we've re-rendered, bail out of\n            // the update and try again. This ensures that the relative timing\n            // between useQuery and useFragment stays roughly the same as\n            // fixed in https://github.com/apollographql/apollo-client/pull/11083\n            clearTimeout(lastTimeout);\n            lastTimeout = setTimeout(forceUpdate) as any;\n          },\n        });\n        return () => {\n          resultRef.current = void 0;\n          subscription.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [cache, stableOptions, currentDiff]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}